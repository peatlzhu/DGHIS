//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Refit;
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.IO;
using System.ComponentModel.DataAnnotations;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using DGHIS.Response;
using DGHIS.Entity.DomainModels;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace DGHIS.Core.Apis
{

    public interface IAdministrationDicApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/AdministrationDic/GetPageData")]
        //Task<object> GetPageDataAsync(PageDataOptions parameters);
         Task<PageGridData<AdministrationDic>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/AdministrationDic/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/AdministrationDic/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/AdministrationDic/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/AdministrationDic/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IAdmissionCauseDicApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/AdmissionCauseDic/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<AdmissionCauseDic>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/AdmissionCauseDic/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/AdmissionCauseDic/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/AdmissionCauseDic/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/AdmissionCauseDic/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IApp_AppointmentApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/App_Appointment/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<App_Appointment>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/App_Appointment/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_Appointment/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_Appointment/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/App_Appointment/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IApp_ExpertApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/App_Expert/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<App_Expert>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/App_Expert/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_Expert/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_Expert/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/App_Expert/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/App_Expert/getSelectorDemo")]
        Task<ApiResult> GetSelectorDemoAsync(PageDataOptions body);


    }

    public interface IApp_NewsApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/App_News/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<App_News>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/App_News/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_News/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_News/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/App_News/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/App_News/createPage")]
        Task<ApiResult> CreatePageAsync(App_News body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/App_News/setCover")]
        Task<ApiResult> SetCoverAsync(string t1, string t2, App_News body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/App_News/getDemoPageList")]
        Task<ApiResult> GetDemoPageListAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/App_News/getNav")]
        Task<ApiResult> GetNavAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/App_News/getList")]
        Task<ApiResult> GetListAsync(int? newsType, int? page);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/App_News/getHomeList")]
        Task<ApiResult> GetHomeListAsync();


    }

    public interface INewsApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/News/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<News>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/News/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/News/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/News/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/News/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/news/createPage")]
        Task<ApiResult> CreatePageAsync(App_News body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/news/setCover")]
        Task<ApiResult> SetCoverAsync(string t1, string t2, App_News body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/news/getDemoPageList")]
        Task<ApiResult> GetDemoPageListAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/news/getNav")]
        Task<ApiResult> GetNavAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/news/getList")]
        Task<ApiResult> GetListAsync(int? newsType, int? page);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/news/getHomeList")]
        Task<ApiResult> GetHomeListAsync();


    }

    public interface IApp_ReportPriceApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/App_ReportPrice/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<App_ReportPrice>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/App_ReportPrice/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_ReportPrice/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_ReportPrice/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/App_ReportPrice/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/App_ReportPrice/getTable1Data")]
        Task<ApiResult> GetTable1DataAsync(PageDataOptions body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/App_ReportPrice/getTable2Data")]
        Task<ApiResult> GetTable2DataAsync(PageDataOptions body);


    }

    public interface IApp_TransactionApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/App_Transaction/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<App_Transaction>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/App_Transaction/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_Transaction/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_Transaction/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/App_Transaction/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IApp_TransactionAvgPriceApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/App_TransactionAvgPrice/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<App_TransactionAvgPrice>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/App_TransactionAvgPrice/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_TransactionAvgPrice/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/App_TransactionAvgPrice/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/App_TransactionAvgPrice/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IBuilderApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Builder/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Builder>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Builder/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Builder/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Builder/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Builder/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Builder/GetTableTree")]
        Task<ApiResult> GetTableTreeAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Builder/CreateVuePage")]
        Task<ApiResult> CreateVuePageAsync(string vuePath, Sys_TableInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Builder/CreateModel")]
        Task<ApiResult> CreateModelAsync(Sys_TableInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Builder/Save")]
        Task<ApiResult> SaveAsync(Sys_TableInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Builder/CreateServices")]
        Task<ApiResult> CreateServicesAsync(string tableName, string nameSpace, string foldername, bool? partial, bool? api);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Builder/LoadTableInfo")]
        Task<ApiResult> LoadTableInfoAsync(int? parentId, string tableName, string columnCNName, string nameSpace, string foldername, int? table_Id, bool? isTreeLoad);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Builder/delTree")]
        Task<ApiResult> DelTreeAsync(int? table_Id);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Builder/syncTable")]
        Task<ApiResult> SyncTableAsync(string tableName);

    }

    public interface ICountryDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/CountryDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<CountryDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/CountryDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/CountryDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/CountryDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/CountryDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IDrugBaseClassApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/DrugBaseClass/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<DrugBaseClass>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/DrugBaseClass/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugBaseClass/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugBaseClass/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/DrugBaseClass/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IDrugClassDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/DrugClassDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<DrugClassDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/DrugClassDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugClassDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugClassDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/DrugClassDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IDrugFormDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/DrugFormDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<DrugFormDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/DrugFormDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugFormDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugFormDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/DrugFormDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IDrugImportDetailApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/DrugImportDetail/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<DrugImportDetail>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/DrugImportDetail/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugImportDetail/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugImportDetail/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/DrugImportDetail/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IDrugInfoApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/DrugInfo/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<DrugInfo>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/DrugInfo/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugInfo/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugInfo/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/DrugInfo/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IDrugNameDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/DrugNameDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<DrugNameDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/DrugNameDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugNameDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugNameDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/DrugNameDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IDrugPharmacologyDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/DrugPharmacologyDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<DrugPharmacologyDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/DrugPharmacologyDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugPharmacologyDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugPharmacologyDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/DrugPharmacologyDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IDrugPrescAttrDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/DrugPrescAttrDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<DrugPrescAttrDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/DrugPrescAttrDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugPrescAttrDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugPrescAttrDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/DrugPrescAttrDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IDrugToxiPropertyDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/DrugToxiPropertyDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<DrugToxiPropertyDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/DrugToxiPropertyDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugToxiPropertyDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/DrugToxiPropertyDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/DrugToxiPropertyDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IFormCollectionObjectApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/FormCollectionObject/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<FormCollectionObject>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/FormCollectionObject/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/FormCollectionObject/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/FormCollectionObject/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/FormCollectionObject/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IFormDesignOptionsApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/FormDesignOptions/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<FormDesignOptions>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/FormDesignOptions/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/FormDesignOptions/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/FormDesignOptions/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/FormDesignOptions/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/FormDesignOptions/getFormOptions")]
        Task<ApiResult> GetFormOptionsAsync(System.Guid? id);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/FormDesignOptions/submit")]
        Task<ApiResult> SubmitAsync(SaveModel body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/FormDesignOptions/getList")]
        Task<ApiResult> GetListAsync();


    }

    public interface IFreqDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/FreqDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<FreqDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/FreqDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/FreqDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/FreqDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/FreqDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IValidatorExampleApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/ValidatorExample/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<ValidatorExample>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/ValidatorExample/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/ValidatorExample/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/ValidatorExample/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/ValidatorExample/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/validatorExample/test1")]
        Task<ApiResult> Test1PostAsync(string userName, string phoneNo);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/validatorExample/test1")]
        Task<ApiResult> Test1GetAsync(string userName, string phoneNo);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/validatorExample/test2")]
        Task<ApiResult> Test2PostAsync(string userName, string phoneNo);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/validatorExample/test2")]
        Task<ApiResult> Test2GetAsync(string userName, string phoneNo);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/validatorExample/test3")]
        Task<ApiResult> Test3PostAsync(string local, string qty);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/validatorExample/test3")]
        Task<ApiResult> Test3GetAsync(string local, string qty);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/validatorExample/Test4")]
        Task<ApiResult> Test4PostAsync(LoginInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/validatorExample/Test4")]
        Task<ApiResult> Test4GetAsync(LoginInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/validatorExample/Test5")]
        Task<ApiResult> Test5PostAsync(LoginInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/validatorExample/Test5")]
        Task<ApiResult> Test5GetAsync(LoginInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/validatorExample/Test6")]
        Task<ApiResult> Test6PostAsync(string phoneNo, LoginInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/validatorExample/Test6")]
        Task<ApiResult> Test6GetAsync(string phoneNo, LoginInfo body);

    }

    public interface IPriceListApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/PriceList/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<PriceList>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/PriceList/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/PriceList/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/PriceList/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/PriceList/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IPubDrugDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/PubDrugDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<PubDrugDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/PubDrugDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/PubDrugDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/PubDrugDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/PubDrugDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/PubDrugDict/GetDrugInfo")]
        Task<ApiResult> GetDrugInfoAsync(string drugCode);


    }

    public interface ISellOrderApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/SellOrder/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<SellOrder>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/SellOrder/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/SellOrder/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/SellOrder/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/SellOrder/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/SellOrder/getServiceDate")]
        Task<ApiResult> GetServiceDateAsync();


    }

    public interface ISellOrderListApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/SellOrderList/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<SellOrderList>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/SellOrderList/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/SellOrderList/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/SellOrderList/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/SellOrderList/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/SellOrderList/Export")]
        Task<ApiResult> ExportAsync(PageDataOptions body);

        ///// <returns>Success</returns>
        ///// <exception cref="ServiceException">A server side error occurred.</exception>
        //[Post("/api/SellOrderList/Import")]
        //Task<ApiResult> ImportAsync(System.Collections.Generic.IEnumerable<FileParameter> fileInput);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/SellOrderList/DownLoadTemplate")]
        Task<ApiResult> DownLoadTemplateAsync();


    }

    public interface IStoringWayDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/StoringWayDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<StoringWayDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/StoringWayDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/StoringWayDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/StoringWayDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/StoringWayDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface ISys_DictionaryApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_Dictionary/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_Dictionary>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_Dictionary/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_Dictionary/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_Dictionary/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_Dictionary/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Dictionary/GetVueDictionary")]
        Task<ApiResult> GetVueDictionaryAsync(IEnumerable<string> body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Dictionary/getTableDictionary")]
        Task<ApiResult> GetTableDictionaryAsync(IDictionary<string, IEnumerable<object>> body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Dictionary/getSearchDictionary")]
        Task<ApiResult> GetSearchDictionaryAsync(string dicNo, string value);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Dictionary/getRemoteDefaultKeyValue")]
        Task<ApiResult> GetRemoteDefaultKeyValueAsync(string dicNo, string key);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Dictionary/GetBuilderDictionary")]
        Task<ApiResult> GetBuilderDictionaryAsync();


    }

    public interface ISys_DictionaryListApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_DictionaryList/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_DictionaryList>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_DictionaryList/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_DictionaryList/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_DictionaryList/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_DictionaryList/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_DictionaryList/Export")]
        Task<ApiResult> ExportAsync(PageDataOptions body);

  
        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/Sys_DictionaryList/DownLoadTemplate")]
        Task<ApiResult> DownLoadTemplateAsync();


    }

    public interface ISys_LogApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_Log/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_Log>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_Log/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_Log/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_Log/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_Log/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/Sys_Log/test")]
        Task<ApiResult> TestAsync();


    }

    public interface IMenuApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Menu/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Menu>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Menu/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Menu/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Menu/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Menu/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/menu/getTreeMenu")]
        Task<ApiResult> GetTreeMenuGetAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/menu/getTreeMenu")]
        Task<ApiResult> GetTreeMenuPostAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/menu/getMenu")]
        Task<ApiResult> GetMenuAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/menu/getTreeItem")]
        Task<ApiResult> GetTreeItemAsync(int? menuId);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/menu/save")]
        Task<ApiResult> SaveAsync(Sys_Menu body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/menu/delMenu")]
        Task<ApiResult> DelMenuAsync(int? menuId);


    }

    public interface ISys_QuartzLogApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzLog/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_QuartzLog>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzLog/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzLog/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzLog/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzLog/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface ISys_QuartzOptionsApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzOptions/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_QuartzOptions>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzOptions/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzOptions/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzOptions/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_QuartzOptions/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/Sys_QuartzOptions/test")]
        Task<ApiResult> TestGetAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_QuartzOptions/test")]
        Task<ApiResult> TestPostAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_QuartzOptions/run")]
        Task<ApiResult> RunAsync(Sys_QuartzOptions body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_QuartzOptions/start")]
        Task<ApiResult> StartAsync(Sys_QuartzOptions body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_QuartzOptions/pause")]
        Task<ApiResult> PauseAsync(Sys_QuartzOptions body);


    }

    public interface IRoleApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Role/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Role>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Role/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Role/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Role/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Role/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/role/getCurrentTreePermission")]
        Task<ApiResult> GetCurrentTreePermissionAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/role/getUserTreePermission")]
        Task<ApiResult> GetUserTreePermissionAsync(int? roleId);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/role/savePermission")]
        Task<ApiResult> SavePermissionAsync(int? roleId, IEnumerable<UserPermissions> body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/role/getUserChildRoles")]
        Task<ApiResult> GetUserChildRolesAsync();


        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/role/getTreeTableRootData")]
        Task<ApiResult> GetTreeTableRootDataAsync(PageDataOptions body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/role/getTreeTableChildrenData")]
        Task<ApiResult> GetTreeTableChildrenDataAsync(int? roleId);

    }

    public interface ISys_RoleApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_Role/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_Role>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_Role/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_Role/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_Role/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_Role/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Role/getCurrentTreePermission")]
        Task<ApiResult> GetCurrentTreePermissionAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Role/getUserTreePermission")]
        Task<ApiResult> GetUserTreePermissionAsync(int? roleId);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Role/savePermission")]
        Task<ApiResult> SavePermissionAsync(int? roleId, IEnumerable<UserPermissions> body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Role/getUserChildRoles")]
        Task<ApiResult> GetUserChildRolesAsync();


        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Role/getTreeTableRootData")]
        Task<ApiResult> GetTreeTableRootDataAsync(PageDataOptions body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_Role/getTreeTableChildrenData")]
        Task<ApiResult> GetTreeTableChildrenDataAsync(int? roleId);

    }

    public interface IUserApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/User/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<User>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/User/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/User/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/User/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/User/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/User/login")]
        Task<ApiResult> LoginPostAsync(LoginInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/User/login")]
        Task<ApiResult> LoginGetAsync(LoginInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/User/replaceToken")]
        Task<ApiResult> ReplaceTokenAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/User/modifyPwd")]
        Task<ApiResult> ModifyPwdAsync(string oldPwd, string newPwd);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/User/getCurrentUserInfo")]
        Task<ApiResult> GetCurrentUserInfoAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/User/modifyUserPwd")]
        Task<ApiResult> ModifyUserPwdAsync(string password, string userName);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/User/getVierificationCode")]
        Task<ApiResult> GetVierificationCodeAsync();


    }

    public interface ISys_UserApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_User/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_User>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_User/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_User/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_User/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_User/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_User/login")]
        Task<ApiResult> LoginPostAsync(LoginInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/Sys_User/login")]
        Task<ApiResult> LoginGetAsync(LoginInfo body);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_User/replaceToken")]
        Task<ApiResult> ReplaceTokenAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_User/modifyPwd")]
        Task<ApiResult> ModifyPwdAsync(string oldPwd, string newPwd);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_User/getCurrentUserInfo")]
        Task<ApiResult> GetCurrentUserInfoAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/Sys_User/modifyUserPwd")]
        Task<ApiResult> ModifyUserPwdAsync(string password, string userName);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/Sys_User/getVierificationCode")]
        Task<ApiResult> GetVierificationCodeAsync();


    }

    public interface ISys_WorkFlowApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlow/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_WorkFlow>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlow/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlow/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlow/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlow/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/Sys_WorkFlow/getTableInfo")]
        Task<ApiResult> GetTableInfoAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/Sys_WorkFlow/getNodeDic")]
        Task<ApiResult> GetNodeDicAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/Sys_WorkFlow/getSteps")]
        Task<ApiResult> GetStepsAsync(string tableName, string id);


    }

    public interface ISys_WorkFlowStepApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowStep/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_WorkFlowStep>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowStep/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowStep/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowStep/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowStep/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface ISys_WorkFlowTableApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTable/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_WorkFlowTable>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTable/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTable/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTable/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTable/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface ISys_WorkFlowTableStepApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTableStep/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Sys_WorkFlowTableStep>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTableStep/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTableStep/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTableStep/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Sys_WorkFlowTableStep/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface ITest2019Api
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/Test2019/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<Test2019>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/Test2019/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Test2019/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/Test2019/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/Test2019/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/test2019/delay")]
        Task<ApiResult> DelayPostAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/test2019/delay")]
        Task<ApiResult> DelayGetAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Post("/api/test2019/getMsg")]
        Task<ApiResult> GetMsgPostAsync();

        /// <returns>Success</returns>
        /// <exception cref="ServiceException">A server side error occurred.</exception>
        [Get("/api/test2019/getMsg")]
        Task<ApiResult> GetMsgGetAsync();


    }

    public interface IUnitClassDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/UnitClassDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<UnitClassDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/UnitClassDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/UnitClassDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/UnitClassDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/UnitClassDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IUnitDictApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/UnitDict/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<UnitDict>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/UnitDict/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/UnitDict/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/UnitDict/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/UnitDict/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    public interface IWsDrugImportMasterApi
    {
        /// <summary>
        /// GetPageData
        /// </summary>
        /// <param name="pageData"></param>
        /// <returns></returns>
        [Post("/api/WsDrugImportMaster/GetPageData")]
        Task<object> GetPageDataAsync(PageDataOptions parameters);
        /// Task<PageGridData<WsDrugImportMaster>> GetPageDataAsync(PageDataOptions parameters);

        /// <summary>
        /// Get Detail Page Data
        /// </summary>
        /// <param name="loadData"></param>
        /// <returns></returns>
        [Post("/api/WsDrugImportMaster/GetDetailPage")]
        Task<object> GetDetailPageAsync(PageDataOptions parameters);

        /// <summary>
        /// ADD
        /// </summary>
        /// <param name="saveDataModel">Master table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/WsDrugImportMaster/GetPageData")]
        Task<ApiResult> AddAsync(SaveModel saveDataModel);

        /// <summary>
        /// Edit
        /// </summary>
        /// <param name="saveDataModel">aster table and Child Table Datas</param>
        /// <returns></returns>
        [Post("/api/WsDrugImportMaster/Update")]
        Task<ApiResult> UpdateAsync(SaveModel saveDataModel);

        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="keys">DelKeys</param>
        /// <param name="delList">Is delete details data(default value is true)</param>
        /// <returns></returns>
        [Post("/api/WsDrugImportMaster/Del")]
        Task<ApiResult> DelAsync(object[] keys, bool delList = true);


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class App_News : Prism.Mvvm.BindableBase
    {
        private int _id;
        private string _title;
        private string _content;
        private string _author;
        private System.DateTime? _releaseDate;
        private string _imageUrl;
        private string _bigImageUrls;
        private string _detailUrl;
        private int? _viewCount;
        private int _newsType;
        private int _dailyRecommend;
        private int? _orderNo;
        private int? _enable;
        private int? _createID;
        private string _creator;
        private System.DateTime? _createDate;
        private int? _modifyID;
        private string _modifier;
        private System.DateTime? _modifyDate;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Title
        {
            get { return _title; }

            set { SetProperty(ref _title, value); }
        }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }

            set { SetProperty(ref _content, value); }
        }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Author
        {
            get { return _author; }

            set { SetProperty(ref _author, value); }
        }

        [Newtonsoft.Json.JsonProperty("releaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseDate
        {
            get { return _releaseDate; }

            set { SetProperty(ref _releaseDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ImageUrl
        {
            get { return _imageUrl; }

            set { SetProperty(ref _imageUrl, value); }
        }

        [Newtonsoft.Json.JsonProperty("bigImageUrls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string BigImageUrls
        {
            get { return _bigImageUrls; }

            set { SetProperty(ref _bigImageUrls, value); }
        }

        [Newtonsoft.Json.JsonProperty("detailUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string DetailUrl
        {
            get { return _detailUrl; }

            set { SetProperty(ref _detailUrl, value); }
        }

        [Newtonsoft.Json.JsonProperty("viewCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ViewCount
        {
            get { return _viewCount; }

            set { SetProperty(ref _viewCount, value); }
        }

        [Newtonsoft.Json.JsonProperty("newsType", Required = Newtonsoft.Json.Required.Always)]
        public int NewsType
        {
            get { return _newsType; }

            set { SetProperty(ref _newsType, value); }
        }

        [Newtonsoft.Json.JsonProperty("dailyRecommend", Required = Newtonsoft.Json.Required.Always)]
        public int DailyRecommend
        {
            get { return _dailyRecommend; }

            set { SetProperty(ref _dailyRecommend, value); }
        }

        [Newtonsoft.Json.JsonProperty("orderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderNo
        {
            get { return _orderNo; }

            set { SetProperty(ref _orderNo, value); }
        }

        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Enable
        {
            get { return _enable; }

            set { SetProperty(ref _enable, value); }
        }

        [Newtonsoft.Json.JsonProperty("createID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CreateID
        {
            get { return _createID; }

            set { SetProperty(ref _createID, value); }
        }

        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Creator
        {
            get { return _creator; }

            set { SetProperty(ref _creator, value); }
        }

        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreateDate
        {
            get { return _createDate; }

            set { SetProperty(ref _createDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ModifyID
        {
            get { return _modifyID; }

            set { SetProperty(ref _modifyID, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Modifier
        {
            get { return _modifier; }

            set { SetProperty(ref _modifier, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate
        {
            get { return _modifyDate; }

            set { SetProperty(ref _modifyDate, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginInfo : Prism.Mvvm.BindableBase
    {
        private string _userName;
        private string _password;
        private string _verificationCode;
        private string _uuid;

        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string UserName
        {
            get { return _userName; }

            set { SetProperty(ref _userName, value); }
        }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Password
        {
            get { return _password; }

            set { SetProperty(ref _password, value); }
        }

        [Newtonsoft.Json.JsonProperty("verificationCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string VerificationCode
        {
            get { return _verificationCode; }

            set { SetProperty(ref _verificationCode, value); }
        }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UUID
        {
            get { return _uuid; }

            set { SetProperty(ref _uuid, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageDataOptions : Prism.Mvvm.BindableBase
    {
        private int _page;
        private int _rows;
        private int _total;
        private string _tableName;
        private string _sort;
        private string _order;
        private string _wheres;
        private bool _export;
        private object _value;

        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page
        {
            get { return _page; }

            set { SetProperty(ref _page, value); }
        }

        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rows
        {
            get { return _rows; }

            set { SetProperty(ref _rows, value); }
        }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total
        {
            get { return _total; }

            set { SetProperty(ref _total, value); }
        }

        [Newtonsoft.Json.JsonProperty("tableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TableName
        {
            get { return _tableName; }

            set { SetProperty(ref _tableName, value); }
        }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort
        {
            get { return _sort; }

            set { SetProperty(ref _sort, value); }
        }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order
        {
            get { return _order; }

            set { SetProperty(ref _order, value); }
        }

        [Newtonsoft.Json.JsonProperty("wheres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wheres
        {
            get { return _wheres; }

            set { SetProperty(ref _wheres, value); }
        }

        [Newtonsoft.Json.JsonProperty("export", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Export
        {
            get { return _export; }

            set { SetProperty(ref _export, value); }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value
        {
            get { return _value; }

            set { SetProperty(ref _value, value); }
        }

    }

   

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sys_Actions : Prism.Mvvm.BindableBase
    {
        private int _action_Id;
        private int _menu_Id;
        private string _text;
        private string _value;

        [Newtonsoft.Json.JsonProperty("action_Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Action_Id
        {
            get { return _action_Id; }

            set { SetProperty(ref _action_Id, value); }
        }

        [Newtonsoft.Json.JsonProperty("menu_Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Menu_Id
        {
            get { return _menu_Id; }

            set { SetProperty(ref _menu_Id, value); }
        }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text
        {
            get { return _text; }

            set { SetProperty(ref _text, value); }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }

            set { SetProperty(ref _value, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sys_Menu : Prism.Mvvm.BindableBase
    {
        private int _menu_Id;
        private int _parentId;
        private string _menuName;
        private string _tableName;
        private string _url;
        private string _auth;
        private string _description;
        private string _icon;
        private int? _orderNo;
        private string _creator;
        private System.DateTime? _createDate;
        private string _modifier;
        private System.DateTime? _modifyDate;
        private int? _enable;
        private int? _menuType;
        private System.Collections.ObjectModel.ObservableCollection<Sys_Actions> _actions;

        [Newtonsoft.Json.JsonProperty("menu_Id", Required = Newtonsoft.Json.Required.Always)]
        public int Menu_Id
        {
            get { return _menu_Id; }

            set { SetProperty(ref _menu_Id, value); }
        }

        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Always)]
        public int ParentId
        {
            get { return _parentId; }

            set { SetProperty(ref _parentId, value); }
        }

        [Newtonsoft.Json.JsonProperty("menuName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MenuName
        {
            get { return _menuName; }

            set { SetProperty(ref _menuName, value); }
        }

        [Newtonsoft.Json.JsonProperty("tableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TableName
        {
            get { return _tableName; }

            set { SetProperty(ref _tableName, value); }
        }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10000)]
        public string Url
        {
            get { return _url; }

            set { SetProperty(ref _url, value); }
        }

        [Newtonsoft.Json.JsonProperty("auth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10000)]
        public string Auth
        {
            get { return _auth; }

            set { SetProperty(ref _auth, value); }
        }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description
        {
            get { return _description; }

            set { SetProperty(ref _description, value); }
        }

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Icon
        {
            get { return _icon; }

            set { SetProperty(ref _icon, value); }
        }

        [Newtonsoft.Json.JsonProperty("orderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderNo
        {
            get { return _orderNo; }

            set { SetProperty(ref _orderNo, value); }
        }

        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Creator
        {
            get { return _creator; }

            set { SetProperty(ref _creator, value); }
        }

        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreateDate
        {
            get { return _createDate; }

            set { SetProperty(ref _createDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Modifier
        {
            get { return _modifier; }

            set { SetProperty(ref _modifier, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate
        {
            get { return _modifyDate; }

            set { SetProperty(ref _modifyDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Enable
        {
            get { return _enable; }

            set { SetProperty(ref _enable, value); }
        }

        [Newtonsoft.Json.JsonProperty("menuType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MenuType
        {
            get { return _menuType; }

            set { SetProperty(ref _menuType, value); }
        }

        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Sys_Actions> Actions
        {
            get { return _actions; }

            set { SetProperty(ref _actions, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sys_QuartzOptions : Prism.Mvvm.BindableBase
    {
        private System.Guid _id;
        private string _taskName;
        private string _groupName;
        private string _method;
        private int? _timeOut;
        private string _cronExpression;
        private string _apiUrl;
        private string _postData;
        private string _authKey;
        private string _authValue;
        private string _describe;
        private System.DateTime? _lastRunTime;
        private int? _status;
        private int? _createID;
        private string _creator;
        private System.DateTime? _createDate;
        private int? _modifyID;
        private string _modifier;
        private System.DateTime? _modifyDate;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("taskName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string TaskName
        {
            get { return _taskName; }

            set { SetProperty(ref _taskName, value); }
        }

        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string GroupName
        {
            get { return _groupName; }

            set { SetProperty(ref _groupName, value); }
        }

        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Method
        {
            get { return _method; }

            set { SetProperty(ref _method, value); }
        }

        [Newtonsoft.Json.JsonProperty("timeOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeOut
        {
            get { return _timeOut; }

            set { SetProperty(ref _timeOut, value); }
        }

        [Newtonsoft.Json.JsonProperty("cronExpression", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string CronExpression
        {
            get { return _cronExpression; }

            set { SetProperty(ref _cronExpression, value); }
        }

        [Newtonsoft.Json.JsonProperty("apiUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ApiUrl
        {
            get { return _apiUrl; }

            set { SetProperty(ref _apiUrl, value); }
        }

        [Newtonsoft.Json.JsonProperty("postData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostData
        {
            get { return _postData; }

            set { SetProperty(ref _postData, value); }
        }

        [Newtonsoft.Json.JsonProperty("authKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string AuthKey
        {
            get { return _authKey; }

            set { SetProperty(ref _authKey, value); }
        }

        [Newtonsoft.Json.JsonProperty("authValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string AuthValue
        {
            get { return _authValue; }

            set { SetProperty(ref _authValue, value); }
        }

        [Newtonsoft.Json.JsonProperty("describe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Describe
        {
            get { return _describe; }

            set { SetProperty(ref _describe, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastRunTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastRunTime
        {
            get { return _lastRunTime; }

            set { SetProperty(ref _lastRunTime, value); }
        }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status
        {
            get { return _status; }

            set { SetProperty(ref _status, value); }
        }

        [Newtonsoft.Json.JsonProperty("createID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CreateID
        {
            get { return _createID; }

            set { SetProperty(ref _createID, value); }
        }

        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Creator
        {
            get { return _creator; }

            set { SetProperty(ref _creator, value); }
        }

        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreateDate
        {
            get { return _createDate; }

            set { SetProperty(ref _createDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ModifyID
        {
            get { return _modifyID; }

            set { SetProperty(ref _modifyID, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Modifier
        {
            get { return _modifier; }

            set { SetProperty(ref _modifier, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate
        {
            get { return _modifyDate; }

            set { SetProperty(ref _modifyDate, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sys_TableColumn : Prism.Mvvm.BindableBase
    {
        private int _table_Id;
        private int _columnId;
        private string _columnName;
        private string _columnCnName;
        private string _columnType;
        private string _tableName;
        private int? _maxlength;
        private int? _isNull;
        private int? _isDisplay;
        private int? _isKey;
        private string _columnformat;
        private string _script;
        private string _dropNo;
        private int? _isImage;
        private int? _sortable;
        private int? _columnWidth;
        private int? _searchRowNo;
        private int? _searchColNo;
        private string _searchType;
        private int? _editRowNo;
        private int? _editColNo;
        private string _editType;
        private int? _colSize;
        private int? _isReadDataset;
        private int? _enable;
        private int? _apiInPut;
        private int? _apiIsNull;
        private int? _apiOutPut;
        private int? _createID;
        private string _creator;
        private System.DateTime? _createDate;
        private int? _modifyID;
        private string _modifier;
        private System.DateTime? _modifyDate;
        private int? _orderNo;
        private int? _isColumnData;

        [Newtonsoft.Json.JsonProperty("table_Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Table_Id
        {
            get { return _table_Id; }

            set { SetProperty(ref _table_Id, value); }
        }

        [Newtonsoft.Json.JsonProperty("columnId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ColumnId
        {
            get { return _columnId; }

            set { SetProperty(ref _columnId, value); }
        }

        [Newtonsoft.Json.JsonProperty("columnName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColumnName
        {
            get { return _columnName; }

            set { SetProperty(ref _columnName, value); }
        }

        [Newtonsoft.Json.JsonProperty("columnCnName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColumnCnName
        {
            get { return _columnCnName; }

            set { SetProperty(ref _columnCnName, value); }
        }

        [Newtonsoft.Json.JsonProperty("columnType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColumnType
        {
            get { return _columnType; }

            set { SetProperty(ref _columnType, value); }
        }

        [Newtonsoft.Json.JsonProperty("tableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TableName
        {
            get { return _tableName; }

            set { SetProperty(ref _tableName, value); }
        }

        [Newtonsoft.Json.JsonProperty("maxlength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Maxlength
        {
            get { return _maxlength; }

            set { SetProperty(ref _maxlength, value); }
        }

        [Newtonsoft.Json.JsonProperty("isNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IsNull
        {
            get { return _isNull; }

            set { SetProperty(ref _isNull, value); }
        }

        [Newtonsoft.Json.JsonProperty("isDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IsDisplay
        {
            get { return _isDisplay; }

            set { SetProperty(ref _isDisplay, value); }
        }

        [Newtonsoft.Json.JsonProperty("isKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IsKey
        {
            get { return _isKey; }

            set { SetProperty(ref _isKey, value); }
        }

        [Newtonsoft.Json.JsonProperty("columnformat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Columnformat
        {
            get { return _columnformat; }

            set { SetProperty(ref _columnformat, value); }
        }

        [Newtonsoft.Json.JsonProperty("script", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Script
        {
            get { return _script; }

            set { SetProperty(ref _script, value); }
        }

        [Newtonsoft.Json.JsonProperty("dropNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DropNo
        {
            get { return _dropNo; }

            set { SetProperty(ref _dropNo, value); }
        }

        [Newtonsoft.Json.JsonProperty("isImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IsImage
        {
            get { return _isImage; }

            set { SetProperty(ref _isImage, value); }
        }

        [Newtonsoft.Json.JsonProperty("sortable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sortable
        {
            get { return _sortable; }

            set { SetProperty(ref _sortable, value); }
        }

        [Newtonsoft.Json.JsonProperty("columnWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ColumnWidth
        {
            get { return _columnWidth; }

            set { SetProperty(ref _columnWidth, value); }
        }

        [Newtonsoft.Json.JsonProperty("searchRowNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SearchRowNo
        {
            get { return _searchRowNo; }

            set { SetProperty(ref _searchRowNo, value); }
        }

        [Newtonsoft.Json.JsonProperty("searchColNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SearchColNo
        {
            get { return _searchColNo; }

            set { SetProperty(ref _searchColNo, value); }
        }

        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchType
        {
            get { return _searchType; }

            set { SetProperty(ref _searchType, value); }
        }

        [Newtonsoft.Json.JsonProperty("editRowNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EditRowNo
        {
            get { return _editRowNo; }

            set { SetProperty(ref _editRowNo, value); }
        }

        [Newtonsoft.Json.JsonProperty("editColNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EditColNo
        {
            get { return _editColNo; }

            set { SetProperty(ref _editColNo, value); }
        }

        [Newtonsoft.Json.JsonProperty("editType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EditType
        {
            get { return _editType; }

            set { SetProperty(ref _editType, value); }
        }

        [Newtonsoft.Json.JsonProperty("colSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ColSize
        {
            get { return _colSize; }

            set { SetProperty(ref _colSize, value); }
        }

        [Newtonsoft.Json.JsonProperty("isReadDataset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IsReadDataset
        {
            get { return _isReadDataset; }

            set { SetProperty(ref _isReadDataset, value); }
        }

        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Enable
        {
            get { return _enable; }

            set { SetProperty(ref _enable, value); }
        }

        [Newtonsoft.Json.JsonProperty("apiInPut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApiInPut
        {
            get { return _apiInPut; }

            set { SetProperty(ref _apiInPut, value); }
        }

        [Newtonsoft.Json.JsonProperty("apiIsNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApiIsNull
        {
            get { return _apiIsNull; }

            set { SetProperty(ref _apiIsNull, value); }
        }

        [Newtonsoft.Json.JsonProperty("apiOutPut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApiOutPut
        {
            get { return _apiOutPut; }

            set { SetProperty(ref _apiOutPut, value); }
        }

        [Newtonsoft.Json.JsonProperty("createID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CreateID
        {
            get { return _createID; }

            set { SetProperty(ref _createID, value); }
        }

        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator
        {
            get { return _creator; }

            set { SetProperty(ref _creator, value); }
        }

        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreateDate
        {
            get { return _createDate; }

            set { SetProperty(ref _createDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ModifyID
        {
            get { return _modifyID; }

            set { SetProperty(ref _modifyID, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modifier
        {
            get { return _modifier; }

            set { SetProperty(ref _modifier, value); }
        }

        [Newtonsoft.Json.JsonProperty("modifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate
        {
            get { return _modifyDate; }

            set { SetProperty(ref _modifyDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("orderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderNo
        {
            get { return _orderNo; }

            set { SetProperty(ref _orderNo, value); }
        }

        [Newtonsoft.Json.JsonProperty("isColumnData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IsColumnData
        {
            get { return _isColumnData; }

            set { SetProperty(ref _isColumnData, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sys_TableInfo : Prism.Mvvm.BindableBase
    {
        private int _table_Id;
        private int? _parentId;
        private string _tableName;
        private string _tableTrueName;
        private string _columnCNName;
        private string _namespace;
        private string _folderName;
        private string _dataTableType;
        private string _editorType;
        private int? _orderNo;
        private string _uploadField;
        private int? _uploadMaxCount;
        private string _richText;
        private string _expressField;
        private string _dbServer;
        private string _sortName;
        private string _detailCnName;
        private string _detailName;
        private int? _enable;
        private string _cnName;
        private System.Collections.ObjectModel.ObservableCollection<Sys_TableColumn> _tableColumns;

        [Newtonsoft.Json.JsonProperty("table_Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Table_Id
        {
            get { return _table_Id; }

            set { SetProperty(ref _table_Id, value); }
        }

        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId
        {
            get { return _parentId; }

            set { SetProperty(ref _parentId, value); }
        }

        [Newtonsoft.Json.JsonProperty("tableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TableName
        {
            get { return _tableName; }

            set { SetProperty(ref _tableName, value); }
        }

        [Newtonsoft.Json.JsonProperty("tableTrueName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TableTrueName
        {
            get { return _tableTrueName; }

            set { SetProperty(ref _tableTrueName, value); }
        }

        [Newtonsoft.Json.JsonProperty("columnCNName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColumnCNName
        {
            get { return _columnCNName; }

            set { SetProperty(ref _columnCNName, value); }
        }

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace
        {
            get { return _namespace; }

            set { SetProperty(ref _namespace, value); }
        }

        [Newtonsoft.Json.JsonProperty("folderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FolderName
        {
            get { return _folderName; }

            set { SetProperty(ref _folderName, value); }
        }

        [Newtonsoft.Json.JsonProperty("dataTableType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataTableType
        {
            get { return _dataTableType; }

            set { SetProperty(ref _dataTableType, value); }
        }

        [Newtonsoft.Json.JsonProperty("editorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EditorType
        {
            get { return _editorType; }

            set { SetProperty(ref _editorType, value); }
        }

        [Newtonsoft.Json.JsonProperty("orderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderNo
        {
            get { return _orderNo; }

            set { SetProperty(ref _orderNo, value); }
        }

        [Newtonsoft.Json.JsonProperty("uploadField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UploadField
        {
            get { return _uploadField; }

            set { SetProperty(ref _uploadField, value); }
        }

        [Newtonsoft.Json.JsonProperty("uploadMaxCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UploadMaxCount
        {
            get { return _uploadMaxCount; }

            set { SetProperty(ref _uploadMaxCount, value); }
        }

        [Newtonsoft.Json.JsonProperty("richText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RichText
        {
            get { return _richText; }

            set { SetProperty(ref _richText, value); }
        }

        [Newtonsoft.Json.JsonProperty("expressField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpressField
        {
            get { return _expressField; }

            set { SetProperty(ref _expressField, value); }
        }

        [Newtonsoft.Json.JsonProperty("dbServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DbServer
        {
            get { return _dbServer; }

            set { SetProperty(ref _dbServer, value); }
        }

        [Newtonsoft.Json.JsonProperty("sortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortName
        {
            get { return _sortName; }

            set { SetProperty(ref _sortName, value); }
        }

        [Newtonsoft.Json.JsonProperty("detailCnName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailCnName
        {
            get { return _detailCnName; }

            set { SetProperty(ref _detailCnName, value); }
        }

        [Newtonsoft.Json.JsonProperty("detailName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailName
        {
            get { return _detailName; }

            set { SetProperty(ref _detailName, value); }
        }

        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Enable
        {
            get { return _enable; }

            set { SetProperty(ref _enable, value); }
        }

        [Newtonsoft.Json.JsonProperty("cnName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CnName
        {
            get { return _cnName; }

            set { SetProperty(ref _cnName, value); }
        }

        [Newtonsoft.Json.JsonProperty("tableColumns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Sys_TableColumn> TableColumns
        {
            get { return _tableColumns; }

            set { SetProperty(ref _tableColumns, value); }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserPermissions : Prism.Mvvm.BindableBase
    {
        private int _id;
        private int _pid;
        private string _text;
        private bool _isApp;
        private System.Collections.ObjectModel.ObservableCollection<Sys_Actions> _actions;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("pid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Pid
        {
            get { return _pid; }

            set { SetProperty(ref _pid, value); }
        }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text
        {
            get { return _text; }

            set { SetProperty(ref _text, value); }
        }

        [Newtonsoft.Json.JsonProperty("isApp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsApp
        {
            get { return _isApp; }

            set { SetProperty(ref _isApp, value); }
        }

        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Sys_Actions> Actions
        {
            get { return _actions; }

            set { SetProperty(ref _actions, value); }
        }

    }

}